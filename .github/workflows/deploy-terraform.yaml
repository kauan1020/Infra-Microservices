name: Infrastructure CI/CD

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**', 'k8s/**', 'scripts/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**', 'k8s/**', 'scripts/**' ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: fiap-x-dev

jobs:
  terraform-plan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Import existing resources (if needed)
      run: |
        cd terraform
        # Tentativa de importar recursos existentes - falha silenciosa se não existirem
        terraform import -input=false module.secrets.aws_secretsmanager_secret.jwt_secret fiap-x-dev-jwt-secret || true
        terraform import -input=false module.secrets.aws_secretsmanager_secret.redis_secret fiap-x-dev-redis-secret || true
        terraform import -input=false module.secrets.aws_secretsmanager_secret.auth_secret fiap-x-dev-auth-secret || true
        terraform import -input=false module.secrets.aws_secretsmanager_secret.notification_secret fiap-x-dev-notification-secret || true

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: terraform/tfplan

  terraform-apply:
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan
        path: terraform/

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy Base Infrastructure
      run: |
        # Aplicar recursos base - kubectl apply é idempotente
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/rbac/service-accounts.yaml || true
        kubectl apply -f k8s/configmaps/app-config.yaml || true
        
        # Criar secrets do Terraform nos K8s
        cd terraform
        JWT_SECRET_NAME=$(terraform output -raw jwt_secret_name)
        REDIS_SECRET_NAME=$(terraform output -raw redis_secret_name)
        AUTH_SECRET_NAME=$(terraform output -raw auth_secret_name)
        NOTIFICATION_SECRET_NAME=$(terraform output -raw notification_secret_name)
        
        # Aplicar secrets se existirem
        if [ -f "../k8s/secrets/secrets.yaml" ]; then
          envsubst < ../k8s/secrets/secrets.yaml | kubectl apply -f -
        fi

  deploy-services:
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Get Terraform outputs
      run: |
        cd terraform
        terraform init
        echo "EFS_FILE_SYSTEM_ID=$(terraform output -raw efs_file_system_id)" >> $GITHUB_ENV
        echo "RDS_AUTH_ENDPOINT=$(terraform output -raw rds_auth_endpoint)" >> $GITHUB_ENV
        echo "RDS_VIDEO_ENDPOINT=$(terraform output -raw rds_video_endpoint)" >> $GITHUB_ENV

    - name: Deploy EFS Storage Class
      run: |
        if [ -f "k8s/storage/efs-storage-class.yaml" ]; then
          envsubst < k8s/storage/efs-storage-class.yaml | kubectl apply -f -
        fi

    - name: Deploy SonarQube
      run: |
        if [ -f "k8s/sonarqube/sonarqube.yaml" ]; then
          kubectl apply -f k8s/sonarqube/sonarqube.yaml
          # Aguardar com timeout mais longo
          kubectl wait --for=condition=ready pod -l app=sonarqube -n sonarqube --timeout=600s || true
        fi

    - name: Deploy Monitoring
      run: |
        if [ -f "k8s/monitoring/prometheus.yaml" ]; then
          kubectl apply -f k8s/monitoring/prometheus.yaml
        fi

    - name: Deploy Redis
      run: |
        if [ -f "k8s/redis/deployment.yaml" ]; then
          kubectl apply -f k8s/redis/deployment.yaml
          kubectl wait --for=condition=ready pod -l app=redis -n fiap-x-dev --timeout=300s || true
        fi

    - name: Deploy Kafka
      run: |
        if [ -f "k8s/kafka/deployment.yaml" ]; then
          kubectl apply -f k8s/kafka/deployment.yaml
          kubectl wait --for=condition=ready pod -l app=kafka -n fiap-x-dev --timeout=300s || true
        fi

    - name: Deploy Network Policies
      run: |
        if [ -f "k8s/network-policies/network-policies.yaml" ]; then
          kubectl apply -f k8s/network-policies/network-policies.yaml
        fi

    - name: Deploy HPA
      run: |
        if [ -f "k8s/autoscaling/hpa.yaml" ]; then
          kubectl apply -f k8s/autoscaling/hpa.yaml
        fi

    - name: Deploy Ingress
      run: |
        if [ -f "k8s/ingress/ingress.yaml" ]; then
          kubectl apply -f k8s/ingress/ingress.yaml
        fi

  validate-infrastructure:
    runs-on: ubuntu-latest
    needs: deploy-services
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Validate Cluster
      run: |
        echo "=== Nodes ==="
        kubectl get nodes
        echo "=== Pods in all namespaces ==="
        kubectl get pods --all-namespaces
        echo "=== Services in all namespaces ==="
        kubectl get services --all-namespaces

    - name: Check Resource Health
      run: |
        echo "=== Pods in fiap-x-dev ==="
        kubectl get pods -n fiap-x-dev || true
        echo "=== Pods in sonarqube ==="
        kubectl get pods -n sonarqube || true
        echo "=== Ingresses ==="
        kubectl get ingress -n fiap-x-dev || true
        echo "=== Secrets ==="
        kubectl get secrets -n fiap-x-dev || true

    - name: Test Service Connectivity
      run: |
        # Testar conectividade interna
        echo "=== Testing internal connectivity ==="
        kubectl run test-pod --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default || true
        
        # Verificar se serviços estão respondendo
        echo "=== Service endpoints ==="
        kubectl get endpoints -n fiap-x-dev || true

  notify:
    runs-on: ubuntu-latest
    needs: [validate-infrastructure]
    if: always()
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

    steps:
    - name: Notify Slack
      if: env.SLACK_WEBHOOK != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#infrastructure'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}